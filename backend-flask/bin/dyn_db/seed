#!/usr/bin/env python3

import boto3
import sys
import os
from datetime import datetime, timezone, timedelta
import uuid

# Joining the path of our file with backend app path
# so we can append it to the sys.path
# and import from app's folders and files
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../')))

from app import app


attrs = {
    'endpoint_url': 'http://localhost:8000',
}

if len(sys.argv) == 2 and "prod" in sys.argv[1]:
    attrs = {}

# Client: Connecting to our DynamoDB Local server
# ddb_client = boto3.client('dynamodb', **attrs)

# Resource: Getting Resources from our DynamoDB Local server
ddb_resource = boto3.resource('dynamodb', **attrs)

table = ddb_resource.Table('cruddur_messages')
print(table)

now = datetime.now(timezone.utc).astimezone()

def get_user_by_handle(handle: str):
    """Gets user object by the given handle
    from our database Returns it"""
    from lib.db import db

    query = db.sql_template('users', 'user_by_handle')
    try:
        user = db.query_wrap_object_json(query, handle)
        return user
    except Exception as e:
        print(f"Couldn't get User: {e}")


def create_message_group(table,
                        message_group_uuid,
                        last_message_at,
                        message,
                        my_user_uuid,
                        other_user_uuid,
                        other_user_display_name,
                        other_user_handle):
    """Creates a new message group object and stores it
    in the DynamoDB cruddur_messages table"""
    record = {
        'pk': f'GRP-{my_user_uuid}',
        'sk': last_message_at,
        'message_group_uuid': message_group_uuid,
        'message': message,
        'user_uuid': other_user_uuid,
        'user_display_name': other_user_display_name,
        'user_handle': other_user_handle
    }
    response = table.put_item(Item=record)
    print('-- Creating a new message group --')
    print(response)


def create_message(table,
                   message_group_uuid,
                   message,
                   created_at,
                   user_uuid,
                   user_display_name,
                   user_handle):
    """Creates a new message object and stores it
    in the DynamoDB cruddur_messages table"""
    record = {
        'pk': f'MSG-{message_group_uuid}',
        'sk': created_at,
        'message_uuid': str(uuid.uuid4()),
        'message': message,
        'user_uuid': user_uuid,
        'user_display_name': user_display_name,
        'user_handle': user_handle
    }
    response = table.put_item(Item=record)
    # print('-- Creating a new message --')
    # print(response)


# Defining the structure of the two users that will be having the below conversation
my_user = get_user_by_handle('elbadil')
other_user = get_user_by_handle('andrew')
users = {
    'my_user': {
        'uuid': my_user['uuid'],
        'display_name': my_user['display_name'],
        'handle': my_user['handle']
    },
    'other_user': {
        'uuid': other_user['uuid'],
        'display_name': other_user['display_name'],
        'handle': other_user['handle']
    }
    # or we can just set the returned object to these two keys:
    # 'my_user': my_user,
    # 'other_user': other_user
}
# print(users)

# Setting a random uuid for message_group_uuid for testing purposes
message_group_uuid = "5ae290ed-55d1-47a0-bc6d-fe2bc2700399"

# Creating a message group record that the my_user will see
create_message_group(
    table=table,
    message_group_uuid=message_group_uuid,
    last_message_at=now.isoformat(),
    message="this is a filler message the my_user will see",
    my_user_uuid=users['my_user']['uuid'],
    other_user_uuid=users['other_user']['uuid'],
    other_user_display_name=users['other_user']['display_name'],
    other_user_handle=users['other_user']['handle'],
)

# Creating a message group record that the other_user will see
create_message_group(
    table=table,
    message_group_uuid=message_group_uuid,
    last_message_at=now.isoformat(),
    message="this is a filler message the other_user will see",
    my_user_uuid=users['other_user']['uuid'],
    other_user_uuid=users['my_user']['uuid'],
    other_user_display_name=users['my_user']['display_name'],
    other_user_handle=users['my_user']['handle'],
)

# Loading conversation file
with open(os.path.join(app.root_path,
                       'bin',
                       'dyn_db',
                       'convo.txt'),
                       'r') as convo_file:
    conversation = convo_file.read()

# Splitting conversion lines and setting the key and message from the conv
conv_lines = conversation.split('\n')
for i, line in enumerate(conv_lines):
    if line.startswith('Person 1: '):
        key = 'my_user'
        message = line.replace('Person 1: ', '')
    elif line.startswith('Person 2: '):
        key = 'other_user'
        message = line.replace('Person 2: ', '')
    else:
        print(line)
        raise 'invalid line'
    # isoformat for the string representation of the datetime object
    created_at = (now + timedelta(minutes=i)).isoformat()
    create_message(
        table=table,
        message_group_uuid=message_group_uuid,
        message=message,
        created_at=created_at,
        user_uuid=users[key]['uuid'],
        user_display_name=users[key]['display_name'],
        user_handle=users[key]['handle']
    )

# print(table.name)